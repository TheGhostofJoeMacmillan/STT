**Session Date:** 2025-08-03 (Original Session)

**Goal:** Fix the `stt` program and improve its user experience.

**Initial State:**
*   Program was crashing the user's computer.
*   The `stt` command provided no feedback on how to operate the program.
*   The `Ctrl+Shift+Space` hotkey was not working reliably.

**Changes Made:**
1.  **Core Functionality Fixes:**
    *   Resolved system crash by removing `suppress=True` from the initial `keyboard.Listener`.
    *   Fixed unresponsive hotkey by reverting from the complex `pynput.keyboard.HotKey` class to a simpler `on_press`/`on_release` implementation.
    *   Confirmed hotkey functionality with temporary debug logging.

2.  **User Experience Enhancements:**
    *   **UI Cleanup:**
        *   Added a command to clear the terminal on startup for a cleaner interface.
        *   Fixed a display bug where status messages (`Recording...`, `Processing...`) would not fully overwrite the previous line, leaving trailing characters. This was solved by padding all status messages to a consistent width.
        *   Re-enabled `suppress=True` for the keyboard listener and added a debounce timer (0.3s) to the hotkey. This prevents the `^@` character from appearing in the terminal on activation and makes the toggle feel more robust.
    *   **Simplification & Clarity:**
        *   Removed the `--verbose` command-line flag and its associated internal logging to simplify the code.
        *   Added a startup message (`Run with -h or --help to see options.`) to make the application more user-friendly.
        *   Updated the `README.md` to reflect all changes and add a troubleshooting section.

---

**Session Date:** 2025-08-04 (Current Session)

**Goal:** Add configurable shortcut keys and implement retro ASCII terminal visualizer.

**Initial State:**
*   User reported another system crash - identified `suppress=True` was re-enabled in the keyboard listener.
*   User requested: 1) Configurable shortcut keys, 2) Retro ASCII terminal visualizer for voice input.

**Changes Made:**
1.  **Critical Stability Fix:**
    *   Removed `suppress=True` from keyboard listener (main.py:131) to prevent system crashes.
    *   Created backup file (main.py.backup) before making changes.

2.  **Major Feature Additions:**
    *   **Configurable Hotkeys:**
        *   Added `-k/--hotkey` command line option for custom key combinations.
        *   Supports combinations like `ctrl+alt+r`, `shift+f1`, etc.
        *   Dynamic hotkey parsing and display in UI.
        *   Default remains `ctrl+shift+space` for backward compatibility.
    
    *   **Retro ASCII Terminal Visualizer:**
        *   Added `-v/--visualizer` flag to enable full-screen retro interface.
        *   Real-time audio waveform visualization using ASCII block characters (▁▂▃▄▅▆▇█).
        *   Retro box-drawing borders and styling (╔═╗║╠╣╚═╝).
        *   Dynamic status bar showing recording state, mode, and last transcription.
        *   Higher refresh rate (50ms) for smooth visualization.

3.  **Technical Improvements:**
    *   Added numpy dependency for audio processing and visualization.
    *   Enhanced audio callback to capture visualization data.
    *   Dual-mode operation: classic line-based UI vs full-screen visualizer.
    *   Updated requirements.txt with numpy dependency.

**Current Status:**
*   Application now supports both classic and visualizer modes.
*   Configurable hotkeys work with any key combination.
*   Real-time ASCII waveform visualization implemented.
*   **Next Step:** User will test the updated installation and new features.

---

**Session Update:** 2025-08-04 (Continued)

**Issues Encountered:**
*   Initial visualizer had heavy ASCII borders that looked unappealing.
*   Spectrum analyzer approach was too complex and didn't match user's vision.
*   Audio processing had numpy array conversion errors.
*   Terminal flickering is inherent limitation causing visual distraction.

**Visualization Iterations:**
1.  **Heavy ASCII Borders:** Retro-style box drawing characters - rejected for being too cluttered.
2.  **Spectrum Analyzer:** Vertical frequency bars with colors - too busy and complex.
3.  **Classic VU Meters:** Final implementation - clean, authentic audio equipment aesthetic.

**Final Implementation:**
*   **Classic VU Meter Design:**
    *   Main horizontal bar with Green → Yellow → Red progression
    *   Peak indicator with magenta triangle during recording
    *   Percentage display for exact audio levels
    *   Frequency bands (BASS/MID/HIGH) for visual interest
    *   Clean layout with proper spacing and centering
*   **Technical Improvements:**
    *   Fixed numpy array conversion for audio processing
    *   Added proper FFT analysis for frequency data
    *   Implemented color-coded level indicators
    *   Enhanced hotkey parsing for function keys (F1-F12)

**Current Status:**
*   VU meter visualization working and visually appealing
*   Audio levels properly detected and displayed
*   Speech-to-text functionality confirmed working
*   Terminal flickering identified as inherent limitation
*   **Next Consideration:** Potential move to web interface or native graphics for smoother animations